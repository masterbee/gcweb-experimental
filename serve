#!/bin/bash

# default hostname
HOST=localhost
# default port number
PORT=8000
# script name
NAME=${0##*/}

usage () {
  cat <<EOF

  $NAME (PHP built-in web server manager) Version 0.2.0
  PHP builtin server manager on port $PORT

  usage: ./$NAME <command> <directory>

  Available commands:

  start     Starts PHP built-in web server server on specified hostname:port, default is localhost:$PORT
  stop      Stops the PHP built-in web server

EOF
return 0
}


# if no command specified exit and show usage
if [[ $# < 1 ]]; then
  echo $NAME: no command specified
  usage
  exit 1
fi


# pidfile contents would be hostname:port:pid
PIDFILE="$NAME".pid
LOGFILE="$NAME".log

setup_colors() {

if which tput >/dev/null 2>&1; then
      ncolors=$(tput colors)
  fi
  if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
    BOLD="$(tput bold)"
    NORMAL="$(tput sgr0)"
  else
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    BOLD=""
    NORMAL=""
  fi
}



validate_server () {
  which php &> /dev/null
  if [[ $? -eq 1 ]]; then
    printf "${YELLOW}Error: PHP not found. ${NORMAL}Please install PHP version 5.4 or greater!\n"
    return 1
  fi

  php -h | grep -q -- '-S'
  if [[ $? -eq 1 ]]; then
    printf "${YELLOW}Error: PHP version must be 5.4 or greater!${NORMAL}\n"
    return 1
  fi

  return 0
}

start_server () {

  validate_server
  if [[ $? -eq 1 ]]; then
    return 1
  fi

  if [[ -e "$PIDFILE" ]]; then
    printf "${YELLOW}Server seems to be running!${NORMAL}\n"
    echo
    echo if not, there is probably a zombie "$PIDFILE" in this directory.
    echo if you are sure no server is running just remove "$PIDFILE" manually and start again
    return 1
  else
    printf "${GREEN}"$NAME" started on $HOST:$PORT${NORMAL}\n"
    php -S "$HOST":"$PORT" >> "$LOGFILE" 2>&1 &
    echo "$HOST":"$PORT":$! > $PIDFILE
    return 0
  fi
}

read_pidfile() {
  if [[ -e "$PIDFILE" ]]; then
    PIDFILECONTENT=`cat "$PIDFILE"`
    IFS=: read HOST PORT PID <<< "$PIDFILECONTENT:"
    return 0
  else
    return 1
  fi

}
stop_server () {
  if read_pidfile; then
    kill -9 "$PID"
    rm -f "$PIDFILE"
    printf "${GREEN}"$NAME" stopped!${NORMAL}\n"
    return 0
  else
    printf "${YELLOW}"$NAME" is not running!${NORMAL}\n"
    return 1
  fi
}



setup_colors

case $1 in
  start) start_server;;
  stop)  stop_server;;
  -h) usage ;;
  --help) usage ;;
  *) usage;;
esac


